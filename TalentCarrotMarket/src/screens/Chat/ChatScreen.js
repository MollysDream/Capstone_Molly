import React, {useState, useCallback, useEffect} from 'react';
import {
    View,
    Text,
    StyleSheet,
    TextInput
} from 'react-native';
import {
    widthPercentageToDP as wp,
    heightPercentageToDP as hp,
  } from 'react-native-responsive-screen';
import {GiftedChat} from 'react-native-gifted-chat'
import io from "socket.io-client";
import AsyncStorage from '@react-native-community/async-storage';

import axios from 'axios';
import requestUser from "../../requestUserAPI";
import request from '../../requestAPI';
import {AnimatedAbsoluteButton} from 'react-native-animated-absolute-buttons';

let socket;
let messages;
let host;

function ChatScreen(props, {navigation}) {
    const [messages, setMessages] = useState([]);
    const [postOwnerId, setPostOwnerId] = useState(props.route.params.postOwner._id);
    const [hostId, sethostId] = useState();
    const [roomId, setRoomId] = useState("");
    const [postOwnerNick, setPostOwnerNick] = useState(props.route.params.postOwner.nickname);

    buttons = [
      {
          color: '#4672B8',
          content:
          <View>
            <Text>  ‚åö üó∫Ô∏è</Text>
            <Text>ÏãúÍ∞Ñ Ïû•ÏÜå</Text>
          </View>,
         action: () => {
          navigation.navigate('tradeSet')
         }
      }
  ];
    useEffect( async() => {
    AsyncStorage.getItem('user_id')
    .then((value) => {
      sethostId(value);
    });
    // console.log(":1111");
  },[]);

  let hostNick;


  /*
  *
  * Ïö∞Î¶¨Í∞Ä Ï∞∏Ïó¨ÌïòÍ≥†ÏûàÎäî Ï±ÑÌåÖÎ∞©Ïùò IdÍ∞í Ï†ÄÏû•Ïö©
  *
  * */
  let chatRoomId;

    useEffect( async() => {
      host = await requestUser.getUserData(hostId);
      hostNick = host.nickname;
      socket = io("http://10.0.2.2:3002");
      socket.emit("searchChatRoom", postOwnerId, postOwnerNick, hostId, hostNick);
      //Îî± Ïó¨Í∏∞ÍπåÏßÄÌïòÎ©¥, ÏßÄÍ∏à postOwnerId,hostId Í∞ÄÏ†∏Ïò® ÏÉÅÌÉúÎãàÍπå ?


      /*
      * postOwnerId, hostIdÍ∞Ä ÏûàÎäî Ï±ÑÌåÖÎ£∏ÏùÑ DBÏóêÏÑú Í≤ÄÏÉâ  (Í∑ºÎç∞ Ïó¨Í∏∞ÏÑú postIdÍ∞Ä ÌïÑÏöîÌï†Í±∞Í∞ôÏùå, ÏôúÎÉê? Í∞ôÏùÄ ÏÇ¨Ïö©Ïûê 2Î™ÖÏù¥ Îã§Î•∏ Í≤åÏãúÎ¨ºÏóê ÎåÄÌï¥ Ï±ÑÌåÖÌï†ÏàòÎèÑ ÏûàÏûêÎÇò!)
      * -> ÏûàÏúºÎ©¥ getChat()ÌïòÍ≥†,
      * ÏóÜÏúºÎ©¥ Ï±ÑÌåÖÎ∞© ÎßåÎì§Ïñ¥ÏÑú Ïã§Ìñâ -> Ïù¥Í±¥ axios.post("http://10.0.2.2:3000/chat/createChatRoom",user1, user2, postId) .-> ÏöîÎü∞Ïãù?
      *         .then((data)=>{
      *            Ïó¨Í∏∞Îäî Î≠ê ÎÑàÍ∞Ä dataÎ°ú ÌïòÍ≥†Ïã∂ÏùÄÍ±∞ ÌïòÎ©¥ ÎêòÍ≥†
      *            data._id Ìï¥ÏÑú roomIdÍ∞í Í∞ÄÏ†∏ÏôÄÏÑú joinRoom argsÎ°ú Ï£ºÎ©¥ Îê†ÎìØ? (ÏßÄÍ∏à 'room1' Ïù¥ÎùºÍ≥† ÎêòÏñ¥ÏûàÎäîÍ±∞)
      *          })
      *       }
      */

      socket.emit('joinRoom','room1');


      /*
      * getChat Ïùò Ïù∏Ïûê! => {roomId: chatRoomId}
      *
      * */

      const preData = await request.getChat();

      if(preData.length != 0){
        preData.map((data)=>{
        if(data.senderId == hostId){
          setMessages((prevMessages)=>GiftedChat.append(prevMessages,[
            {
              _id : data._id,
              text: data.text,
              createdAt: data.createdAt,
              user: {
                _id: 1,

              },
            },
          ]));
        }
        else{
          setMessages((prevMessages)=>GiftedChat.append(prevMessages,
           [
            {
              _id : data._id,
              text: data.text,
              createdAt: data.createdAt,
              user: {
                _id: 2,

              },
             },
           ]));
       }
      });
      }



    return () => {
        socket.emit('leaveRoom','room1');
        socket.disconnect();
      };

    },[hostId]);


    function onSend(newMessages = []){
      socket.emit("chat message to server", newMessages);
      setMessages((prevMessages)=>GiftedChat.append(prevMessages, newMessages));
      onSendDB(newMessages);
    };


    function onSendDB(newMessage) {
      let beforeTime = new Date();
      let month = beforeTime.getMonth() + 1;
      let time =
        beforeTime.getFullYear() +
        '-' +
        month +
        '-' +
        beforeTime.getDate() +
        ' ' +
        beforeTime.getHours() +
        ':' +
        beforeTime.getMinutes() +
        ':' +
        beforeTime.getSeconds();
      let textId = newMessage[0]._id;
      let createdAt = time;
      let text = newMessage[0].text;
      let senderId = hostId;
      let roomId = 'room1';

      // roomIdÎèÑ chatRoomIdÎ°ú Î∞îÍøîÏÑú Ï†ÄÏû•Ìï¥ÏïºÎèº. Ïôú? Ïù¥ÎûòÏïº Î™ΩÍ≥†DBÏóê Ïûò Ï†ÄÏû•Îèº

      let newChat = {
        beforeTime: time,
        textId : textId,
        createdAt : createdAt,
        text : text,
        senderId : senderId,
        roomId : roomId,
      }

      axios.post("http://10.0.2.2:3000/chat/createChat", newChat)
        .then((data)=>{
         })
      }


    return (
      <View style={styles.container}>
        <GiftedChat
          messages={messages}
          onSend={(newMessages) => onSend(newMessages)}
          user={{
            _id: 1,
          }}
        />

        <AnimatedAbsoluteButton
            buttonSize={100}
            buttonColor='gray'
            buttonShape='circular'
            buttonContent={<Text>Í±∞Îûò Ï†úÏïà</Text>}
            direction='top'
            position='bottom-right'
            positionVerticalMargin={10}
            positionHorizontalMargin={10}
            time={500}
            easing='bounce'
            buttons={buttons}
        />
      </View>
  )

}

const styles = StyleSheet.create({
    container: {
    flex: 1,
    height:400,
    },

});

export default ChatScreen;